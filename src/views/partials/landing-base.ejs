<!DOCTYPE html>
<html lang="en">
	<head>
    	<%- include('landing-head.ejs'); %>
	</head>
	<body>
		<%- include('landing-header.ejs'); %>
		<%- content %>
		<%- include('landing-footer.ejs'); %>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r121/three.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.halo.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.net.min.js"></script>
		<script>
       
			// VANTA.NET({
			//     el: "#birds",
			//     mouseControls: true,
			//     touchControls: true,
			//     gyroControls: true,
			//     scale: .75,
			//     scaleMobile: .5,
			//     color: 0xffffff,
			//     //backgroundAlpha: 0,
			//     backgroundColor: 0x2196f3,
			//     points: 10, // Increased for denser/thicker lines
			//     maxDistance: 20, // Wider connections for thicker appearance
			//     spacing: 12 // Closer points for denser lines
			// })
	
			VANTA.HALO({
				el: "#net",
				/* more options (Uncomment) */
				mouseControls: false,
				touchControls: false,
				gyroControls: false,
				color: 0xfd3995,
				//backgroundColor: 0xffffff,
	
				//minHeight: 200.00,
				//minWidth: 200.00,
				//amplitudeFactor: 0.5,
				size: 1.6,
				scale: 0.75,
				xOffset: 0.22,
				//backgroundAlpha: 0,
				scaleMobile: 0.50,
				//backgroundColor: 0x333333,
				//color1: 0x595959,
				//color2: 0xff0a0a,
				//birdSize: 1.80,
				//wingSpan: 19.00,
				//speedLimit: 6.00,
				//separation: 45.00,
				//alignment: 40.00,
				//cohesion: 54.00,
				//quantity: 2.00
			});
			
	
			// VANTA.BIRDS({
			//     el: "#birds",
			//     /* more options (Uncomment) */
			//     backgroundColor: 0x2196f3,
			//     backgroundAlpha: 1,
			//     color1: 0xffc241,
			//     color2: 0x333333,
			//     colorMode: 'lerp', //variance lerpGradient varianceGradient lerp
			//     quantity: 5,
			//     birdSize: 1,
			//     wingSpan: 30,
			//     speedLimit: 5,
			//     separation: 20,
			//     alignment: 20,
			//     cohesion: 20,
			//     backgroundAlpha: 0
			// });
	
			// if (vantaEffect) {
			//     var canvas = document.querySelector('#net canvas');
			//     if (canvas) {
			//         canvas.style.background = 'transparent';
	
			//         try {
			//             if (vantaEffect.scene && vantaEffect.scene.children) {
			//                 vantaEffect.scene.children.forEach(function(child) {
			//                     if (child.material) {
			//                         child.material.color.setHex(0xffffff); // Force white color for lines/points
			//                     }
			//                 });
			//             }
			//         } catch (e) {
			//             Debug.error('Failed to modify VANTA scene: ' + e.message);
			//         }
			//     }
			// }
	
			// Typewriter effect script (ES5)
	
	
			var textElement = document.getElementById('typewriter-text'); // Element to display text
			var messages = ["The world's first Admin WebApp built with Artificial Intelligence", 
							"世界初の人工知能を搭載した管理用Webアプリ", 
							"ตัวอักษรมีเส้นโค้งที่สวยงาม", 
							"Первое в мире админ-приложение на ИИ.",
							"Գեղարվեստական տառատեսակ",
							"বিশ্বের প্রথম এডমিন অ্যাপ্লিকেশন যা কৃত্রিম বুদ্ধিমত্তা দ্বারা নির্মিত।",
							"Primum in mundo admin applicatio ab intellegentia artificiosa.",
							"世界初の人工知能で構築された管理用ウェブアプリ。"]; // Messages to cycle through
			var currentMessageIndex = 0;
			var isDeleting = false;
			var typingSpeed = 15; // Speed of typing/deleting in milliseconds
			var pauseSpeed = 3000; // Pause between cycles in milliseconds
	
			function typeWrite() {
				var fullText = messages[currentMessageIndex];
				var currentText = textElement.textContent;
				var isEndOfMessage = !isDeleting && currentText === fullText;
				var isStartOfMessage = isDeleting && currentText === '';
	
				if (isEndOfMessage) {
					setTimeout(function() {
						isDeleting = true;
						typeWrite();
					}, pauseSpeed);
					return;
				}
	
				if (isStartOfMessage) {
					isDeleting = false;
					currentMessageIndex = (currentMessageIndex + 1) % messages.length;
					typeWrite();
					return;
				}
	
				if (isDeleting) {
					currentText = currentText.slice(0, -1);
				} else {
					currentText = fullText.slice(0, currentText.length + 1);
				}
	
				textElement.textContent = currentText;
				setTimeout(typeWrite, typingSpeed);
			}
	
			// Start the typewriter effect
			if (textElement) {
				textElement.textContent = '';
				typeWrite();
			} else {
				console.error('Typewriter text element not found');
			}
	 
	
		</script>
	</body>
</html>