<%- include('../partials/base.ejs', {
    pageTitle: 'Getting Started',
    currentPage: 'gettingstarted',
    additionalJS: [
        'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js',
        'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/languages/go.min.js',
        'scripts/treedemo.js'
    ],
    additionalCSS: [
        'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/night-owl.min.css',
        'css/demo-docs.css',
        'css/treedemo.css'
    ],
    additionalScripts: `
        document.addEventListener('DOMContentLoaded', function() {
            hljs.highlightAll();
        });
    `,
    content: `

    <nav class="app-breadcrumb" aria-label="breadcrumb">
        <ol class="breadcrumb ms-0">
            <li class="breadcrumb-item">Design</li>
            <li class="breadcrumb-item">Documentation</li>
            <li class="breadcrumb-item active" aria-current="page">Getting Started</li>
        </ol>
    </nav>
    <div class="main-content">

    <h1 class="subheader-title">Getting Started</h1>
           
    <div class="row">
        <div class="order-2 order-xl-1 col-lg-12 col-xl-9">          
           
            <section id="introduction" class="concept-section">
                <h2 class="concept-title with-lead">SmartAdmin v5 â€“ Modern UI Framework</h2>
                <p>Welcome to SmartAdmin v5, an advanced UI Bootstrap 5 Admin and Dashboard template designed for modern web applications. This guide will walk you through setting up and running the SmartAdmin project, understanding its core components, and customizing it to fit your needs.</p>
                
                <div class="pro-tip">
                    <strong>Pro Tip:</strong> SmartAdmin v5 is built with vanilla JavaScript and Bootstrap 5, eliminating jQuery dependencies for better performance and modern development practices.
                </div>
            </section>

            <section id="prerequisites" class="concept-section">
                <h2 class="concept-title">Prerequisites</h2>
                <p>Before you begin, ensure you have the following tools installed on your computer:</p>
                
                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Tool</th>
                                <th>Version</th>
                                <th>Purpose</th>
                                <th>Installation</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Node.js & npm</strong></td>
                                <td>v14.x or later</td>
                                <td>JavaScript runtime and package manager</td>
                                <td><a href="https://nodejs.org/" target="_blank">nodejs.org</a></td>
                            </tr>
                            <tr>
                                <td><strong>Gulp CLI</strong></td>
                                <td>Latest</td>
                                <td>Task automation toolkit</td>
                                <td><code>npm install gulp-cli -g</code></td>
                            </tr>
                            <tr>
                                <td><strong>Git</strong></td>
                                <td>Latest</td>
                                <td>Version control system</td>
                                <td><a href="https://git-scm.com/" target="_blank">git-scm.com</a></td>
                            </tr>
                            <tr>
                                <td><strong>Code Editor</strong></td>
                                <td>Any</td>
                                <td>For editing project files</td>
                                <td>VS Code, Sublime Text, etc.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <p>Verify your installations with these commands:</p>
                <div class="code-example">
                    <pre><code>node --version
npm --version
gulp --version
git --version</code></pre>
                </div>
            </section>

            <section id="installation" class="concept-section">
                <h2 class="concept-title">Installation</h2>
                <p>Follow these steps to set up SmartAdmin v5:</p>
                
                <h4>Step 1: Extract the Package</h4>
                <div class="code-example">
                    <pre><code># Extract the SmartAdmin.zip file to your preferred location
# Navigate to the extracted directory
cd path/to/smartadmin-package-5.x.x/smartadmin-html-full</code></pre>
                </div>

                <h4>Step 2: Install Dependencies</h4>
                <div class="code-example">
                    <pre><code># Install all required npm packages
npm install

# If you encounter Git-related errors, use
npm install --force</code></pre>
                </div>

                <h4>Step 3: Build the Project</h4>
                <div class="code-example">
                    <pre><code># Build all assets (CSS, JS, etc.)
gulp build

# Start development server with live reload
gulp</code></pre>
                </div>

                <div class="warning">
                    <strong>Important:</strong> Always run the project through a web server, not by opening HTML files directly, to avoid AJAX and module loading issues.
                </div>
            </section>

            <section id="project-structure" class="concept-section">
                <h2 class="concept-title">Project Structure</h2>
                <p>Understanding the SmartAdmin v5 file organization is crucial for effective development. Click the tree view below to expand and collapse the project structure:</p>

                <div class="tree-view-container">
                    <div id="tree-view" class="tree-view"></div>
                </div>

                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Directory/File</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><code>/src</code></td>
                                <td>Source files (SCSS, JS, views)</td>
                            </tr>
                            <tr>
                                <td><code>/dist</code></td>
                                <td>Compiled and processed files (created by Gulp)</td>
                            </tr>
                            <tr>
                                <td><code>/src/sass</code></td>
                                <td>SCSS source files for styling</td>
                            </tr>
                            <tr>
                                <td><code>/src/scripts</code></td>
                                <td>JavaScript source files</td>
                            </tr>
                            <tr>
                                <td><code>/src/views</code></td>
                                <td>EJS template files for HTML generation</td>
                            </tr>
                            <tr>
                                <td><code>gulpfile.js</code></td>
                                <td>Gulp configuration and tasks</td>
                            </tr>
                            <tr>
                                <td><code>navigation.json</code></td>
                                <td>Navigation structure configuration</td>
                            </tr>
                            <tr>
                                <td><code>package.json</code></td>
                                <td>Project dependencies and scripts</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="gulp-system" class="concept-section">
                <h2 class="concept-title">Gulp Build System</h2>
                <p>SmartAdmin v5 uses Gulp to automate development tasks. The <code>gulpfile.js</code> defines various tasks for building, processing, and serving the application.</p>
                
                <h4>Key Gulp Tasks</h4>
                <p>Here are the main Gulp tasks you'll use during development:</p>
                <div class="code-example">
                    <pre><code>// Default task - builds everything and starts watching for changes
gulp

// Build all assets without watching
gulp build

// Generate CSS only
gulp appCss

// Generate JavaScript only
gulp js

// Generate HTML from EJS templates
gulp html

// Generate navigation from navigation.json
gulp navigation</code></pre>
                </div>

                <h4>Gulp Configuration Structure</h4>
                <p>The <code>gulpfile.js</code> contains configuration for paths, tasks, and build options:</p>
                <div class="code-example">
                    <pre><code>// Configuration object from gulpfile.js
const config = {
    paths: {
        src: {
            // Source file paths
            appSass: './src/sass/**/*.scss',
            vendorCSS: './src/css/*.css',
            views: './src/views/pages/*.ejs',
            scripts: ['./src/scripts/**/*.js', '!./src/scripts/_archive/**/*.js'],
            images: './src/img/**/*.{gif,jpg,png,svg,webp}',
            navigation: './src/navigation.json'
        },
        dist: {
            // Distribution paths
            appCss: 'dist/css',
            html: 'dist',
            scripts: './dist/scripts',
            images: './dist/img',
            navigation: './src/views/partials/generated-navigation.ejs'
        },
        watch: {
            // Watch paths for changes
            appSass: './src/sass/**/*.scss',
            views: ['./src/views/**/*.ejs', './src/views/partials/**/*.ejs'],
            scripts: './src/scripts/**/*.js',
            navigation: './src/navigation.json'
        }
    },
    browserSync: {
        // BrowserSync configuration
        baseDir: './dist'
    }
};</code></pre>
                </div>

                <h4>Customizing the Gulp Build Process</h4>
                <p>You can customize the Gulp build process to fit your project needs:</p>
                
                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Customization</th>
                                <th>How to Implement</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Adding New Tasks</strong></td>
                                <td>Define new task functions and register them with <code>gulp.task()</code></td>
                            </tr>
                            <tr>
                                <td><strong>Modifying Build Paths</strong></td>
                                <td>Update the <code>config.paths</code> object to change source or destination directories</td>
                            </tr>
                            <tr>
                                <td><strong>Adding Preprocessors</strong></td>
                                <td>Install additional Gulp plugins and add them to the appropriate task pipeline</td>
                            </tr>
                            <tr>
                                <td><strong>Optimizing for Production</strong></td>
                                <td>Add minification, compression, and optimization steps to the build tasks</td>
                            </tr>
                            <tr>
                                <td><strong>Adding Linting</strong></td>
                                <td>Incorporate ESLint, Stylelint, or other linting tools into the build process</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <h4>Example: Adding a New Gulp Task</h4>
                <p>Here's how to add a custom task to the Gulp build system:</p>
                <div class="code-example">
                    <pre><code>// Add this to your gulpfile.js
const { src, dest, task } = require('gulp');
const imagemin = require('gulp-imagemin');

// Define a new task for image optimization
function optimizeImages() {
    return src(config.paths.src.images)
        .pipe(imagemin([
            imagemin.gifsicle({interlaced: true}),
            imagemin.mozjpeg({quality: 75, progressive: true}),
            imagemin.optipng({optimizationLevel: 5}),
            imagemin.svgo({
                plugins: [
                    {removeViewBox: false},
                    {cleanupIDs: false}
                ]
            })
        ]))
        .pipe(dest(config.paths.dist.images));
}

// Register the task
task('optimizeImages', optimizeImages);

// Add it to the build task
task('build', gulp.series(
    'clean',
    gulp.parallel('appCss', 'vendorCss', 'js', 'navigation', 'optimizeImages'),
    'html'
));</code></pre>
                </div>

                <h4>Integrating with Backend Build Systems</h4>
                <p>When integrating SmartAdmin with a backend framework, you may need to adjust the Gulp workflow:</p>
                
                <ul class="list-spaced mb-4">
                    <li><strong>ASP.NET / .NET Core:</strong> Configure Gulp to output files to the wwwroot directory and integrate with MSBuild</li>
                    <li><strong>Laravel:</strong> Adjust paths to work with Laravel's public directory structure or integrate with Laravel Mix</li>
                    <li><strong>Django:</strong> Configure Gulp to output to Django's static files directory and integrate with collectstatic</li>
                    <li><strong>Node.js:</strong> Set up Gulp to work alongside Express or other Node.js frameworks</li>
                </ul>

                <div class="pro-tip">
                    <strong>Pro Tip:</strong> You can extend the Gulp tasks by modifying <code>gulpfile.js</code> to add custom build steps, optimizations, or deployment processes. Consider creating environment-specific configurations for development, testing, and production.
                </div>
            </section>

            <section id="navigation-system" class="concept-section">
                <h2 class="concept-title">Navigation System</h2>
                <p>SmartAdmin v5 uses a JSON-based navigation system that generates the application menu structure. The <code>navigation.json</code> file defines the entire navigation hierarchy.</p>
                
                <h4>Simplified Navigation JSON Structure</h4>
                <div class="code-example">
                    <pre><code>// Example from navigation.json
{
  "version": 1.0,
  "lists": [
    {
      "title": "Documentation",
      "icon": "book-open",
      "href": "javascript:void(0);",
      "items": [
        {
          "title": "Getting Started",
          "href": "gettingstarted.html"
        },
        {
          "title": "Core Plugins",
          "href": "javascript:void(0);",
          "items": [
            {
              "title": "smartApp",
              "href": "smartappjs.html",
              "badgeStyle": "badge bg-danger badge-end",
              "badgeText": "P"
            },
            {
              "title": "sortable",
              "href": "sortablejs.html",
              "badgeStyle": "badge bg-warning text-dark badge-end",
              "badgeText": "D"
            }
          ]
        }
      ]
    }
  ]
}</code></pre>
                </div>

                <h4>Badge Support</h4>
                <p>The navigation system supports badges for menu items. Add <code>badgeStyle</code> and <code>badgeText</code> properties to any navigation item:</p>
                <div class="code-example">
                    <pre><code>// Adding badges to navigation items
{
  "title": "smartApp",
  "href": "smartappjs.html",
  "badgeStyle": "badge bg-danger badge-end",
  "badgeText": "P"
}</code></pre>
                </div>

                <div class="warning">
                    <strong>Note:</strong> Both <code>badgeStyle</code> and <code>badgeText</code> properties must be present for the badge to appear in the navigation.
                </div>
            </section>

            <section id="customizing-index" class="concept-section">
                <h2 class="concept-title">Customizing index.ejs as Your Application Foundation</h2>
                <p>The <code>index.ejs</code> file serves as an ideal starting point for building your application. This blank template provides the basic structure while allowing maximum flexibility for integration with various backend frameworks.</p>
                
                <h4>Understanding index.ejs</h4>
                <p>Let's examine the key components of the index.ejs file:</p>
                
                <div class="code-example">
                    <pre><code>// Example of index.ejs structure (simplified)
// This includes the base.ejs template with configuration parameters
include('../partials/base.ejs', {
    pageTitle: 'Page Title',
    currentPage: 'pageIdentifier', // This should match a navigation item ID in navigation.json
    additionalCSS: ['css/your-custom.css'], // Array of CSS files specific to this page
    additionalJS: ['scripts/your-custom.js'], // Array of JavaScript files specific to this page
    additionalScripts: "console.log('Page loaded');", // Inline JavaScript to be executed on page load
    contentRight: "Right sidebar content here", // Content for the right sidebar (if enabled)
    content: "Main content goes here" // Main content of the page
})</code></pre>
                </div>

                <h4>Example of base.ejs Structure</h4>
                <p>The <code>base.ejs</code> file provides the overall layout structure for your application. It includes:</p>
                <div class="code-example">
<pre><code>&lt;!DOCTYPE html>
&lt;html>
    &lt;head>
        &lt; %- include('head.ejs'); % >
    &lt;/head>
    &lt;body class="&lt; %= typeof contentRight !== 'undefined' ? 'content-has-right' : '' % >">
        &lt; %- include('saveloadscript.ejs'); % >
        &lt;section class="app-wrap">
            &lt; %- include('app-header.ejs'); % >
            &lt; %- include('app-sidebar.ejs'); % >
            &lt;section class="app-body">
                &lt;main class="app-content">
                    &lt;div class="content-wrapper">
                        &lt; %- content % >
                    &lt;/div>
                    &lt; % if (typeof contentRight !== 'undefined') { % >
                    &lt;div class="content-wrapper-right">
                        &lt; %- contentRight % >
                    &lt;/div>
                    &lt;% } % >
                &lt;/main>
                &lt; %- include('app-footer.ejs'); % >
            &lt;/section>
            &lt; %- include('app-drawer.ejs'); % >
            &lt; %- include('app-settings.ejs'); % >
        &lt;/section>
        &lt;div class="backdrop" data-action="toggle-swap" data-toggleclass="app-mobile-menu-open">&lt;/div>
        &lt; %- include('app-scripts.ejs'); % >
    &lt;/body>
&lt;/html></code></pre>
                </div>
                <h4>Key Configuration Parameters</h4>
                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Parameter</th>
                                <th>Description</th>
                                <th>Usage</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><code>pageTitle</code></td>
                                <td>Sets the page title in the browser tab</td>
                                <td>String value for the HTML title tag</td>
                            </tr>
                            <tr>
                                <td><code>currentPage</code></td>
                                <td>Identifies the current page for navigation highlighting</td>
                                <td>Should match a navigation item ID in navigation.json</td>
                            </tr>
                            <tr>
                                <td><code>additionalCSS</code></td>
                                <td>Array of CSS files specific to this page</td>
                                <td>Paths relative to the dist directory</td>
                            </tr>
                            <tr>
                                <td><code>additionalJS</code></td>
                                <td>Array of JavaScript files specific to this page</td>
                                <td>Paths relative to the dist directory</td>
                            </tr>
                            <tr>
                                <td><code>additionalScripts</code></td>
                                <td>Inline JavaScript to be executed on page load</td>
                                <td>Raw JavaScript code as a template literal</td>
                            </tr>
                            <tr>
                                <td><code>contentRight</code></td>
                                <td>Content for the right sidebar (if enabled)</td>
                                <td>HTML content as a template literal</td>
                            </tr>
                            <tr>
                                <td><code>content</code></td>
                                <td>Main page content</td>
                                <td>HTML content as a template literal</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <h4>Example of head.ejs Structure</h4>
                <p>The <code>head.ejs</code> file provides the base head for the application:</p>
                <div class="code-example">
                <pre><code>&lt;meta charset="utf-8">
&lt;title>&lt; %= pageTitle % ></title>
&lt;meta name="description" content="Page Description">
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge">
&lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no, minimal-ui">
&lt;!-- Call App Mode on ios devices -->
&lt;meta name="mobile-web-app-capable" content="yes">
&lt;!-- Remove Tap Highlight on Windows Phone IE -->
&lt;meta name="msapplication-tap-highlight" content="no">
&lt;!-- Vendor css -->
&lt;link rel="stylesheet" media="screen, print" href="css/bootstrap.css">
&lt;link rel="stylesheet" media="screen, print" href="css/waves.css">
&lt;!-- Base css -->
&lt;link rel="stylesheet" media="screen, print" href="css/smartapp.css">
&lt;link rel="stylesheet" media="screen, print" href="css/sa-icons.css">
&lt;!-- Page specific CSS, that comes from the index.ejs file under 'additionalCSS' -->
&lt; % if (typeof additionalCSS !== 'undefined' && additionalCSS) { % >
    &lt; % additionalCSS.forEach(function(css) { % >
        &lt;link rel="stylesheet" media="screen, print" href="< %= css % >">
    &lt;% }); % >
&lt; % } % ></code></pre>
                </div>

                <h4>Example of app-scripts.ejs Structure</h4>
                <p>The <code>app-scripts.ejs</code> file provides the base scripts for the application:</p>     
                <div class="code-example">
<pre><code>&lt;!-- core scripts  -->
&lt;script>
    //Run loadPanelState() immediately (before DOMContentLoaded)
&lt;/script>
&lt;!-- Bootstrap JS Bundle with Popper -->
&lt;script type="text/javascript" src="scripts/bootstrap.bundle.min.js"></script>
&lt;script type="text/javascript" src="scripts/waves.min.js">&lt;/script>
&lt;!-- App JS scripts -->
&lt;script type="text/javascript" src="scripts/smartApp.js">&lt;/script>
&lt;script type="text/javascript" src="scripts/smartNavigation.js">&lt;/script>
&lt;script type="text/javascript" src="scripts/smartFilter.js">&lt;/script>   
&lt;script type="text/javascript" src="scripts/thirdparty/sortable/sortable.js">&lt;/script>
&lt;script type="text/javascript" src="scripts/smartSlimscroll.js">&lt;/script>

&lt;!-- Page specific JS -->
&lt; % if (typeof additionalJS !== 'undefined' && additionalJS) { % >
    &lt; % additionalJS.forEach(function(js) { % >
        &lt;script src="&lt; %= js % >">&lt;/script>
    &lt; % }); % >
&lt; % } % >

&lt;script>
    // Initialize the navigation Scripts
    // Waves Effect
    
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the list filter
        // SortableJS
        // Initialize Sortable for each column
        // SmartSlimScroll
    });

    // Initialize tooltips
    // Initialize popovers
    // Set default dropdown behavior
    // Inject additional scripts dynamically
    &lt; % if (typeof additionalScripts !== 'undefined' && additionalScripts) { % >
        &lt; % = additionalScripts % >
    &lt; % } % >
&lt;/script></code></pre>
                </div>


            </section>

            <section id="backend-integration" class="concept-section">
                <h2 class="concept-title">Integration with Backend Frameworks</h2>
                <p>SmartAdmin's template structure can be adapted to work with various backend frameworks. Here's how to approach integration with popular platforms:</p>

                <div class="accordion" id="backendIntegrationAccordion">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingAspNet">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseAspNet" aria-expanded="true" aria-controls="collapseAspNet">
                                ASP.NET / .NET Core
                            </button>
                        </h2>
                        <div id="collapseAspNet" class="accordion-collapse collapse show" aria-labelledby="headingAspNet" data-bs-parent="#backendIntegrationAccordion">
                            <div class="accordion-body">
                                <p>For .NET integration, convert the EJS templates to Razor views:</p>
                                <ol>
                                    <li>Create a <code>_Layout.cshtml</code> based on <code>base.ejs</code></li>
                                    <li>Convert EJS includes to Razor partial views</li>
                                    <li>Replace EJS variables with Razor model properties</li>
                                    <li>Move CSS/JS references to appropriate Razor sections</li>
                                </ol>
                                <div class="code-example">
<pre><code>// ASP.NET Razor example (simplified)
// _Layout.cshtml
@model YourApp.Models.PageViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

// Navigation partial
@await Html.PartialAsync("_Navigation")

// Main Content 
&lt;div class="main-content">
    @RenderBody()
&lt;/div>

// Scripts section 
@section Scripts {
    // Your scripts here 
}</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingPHP">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePHP" aria-expanded="false" aria-controls="collapsePHP">
                                PHP (Laravel/Symfony)
                            </button>
                        </h2>
                        <div id="collapsePHP" class="accordion-collapse collapse" aria-labelledby="headingPHP" data-bs-parent="#backendIntegrationAccordion">
                            <div class="accordion-body">
                                <p>For PHP frameworks like Laravel or Symfony:</p>
                                <ol class="list-spaced mb-4">
                                    <li>Convert <code>base.ejs</code> to a Blade/Twig layout template</li>
                                    <li>Use framework-specific template inheritance</li>
                                    <li>Implement sections/blocks for content areas</li>
                                </ol>
                                <h4>Laravel (Blade) Example:</h4>
                                <div class="code-example">
                                    <pre><code>// Laravel Blade example (simplified)
// layouts/app.blade.php
&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
    &lt;title>{{ $pageTitle ?? 'SmartAdmin' }}&lt;/title>
    &lt;!-- CSS includes -->
&lt;/head>
&lt;body>
    @include('partials.navigation')
    
    &lt;div class="main-content">
        @yield('content')
        &lt;/div>
    
    &lt;!-- Script includes -->
&lt;/body>
&lt;/html></code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingPython">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePython" aria-expanded="false" aria-controls="collapsePython">
                                Python (Django/Flask)
                            </button>
                        </h2>
                        <div id="collapsePython" class="accordion-collapse collapse" aria-labelledby="headingPython" data-bs-parent="#backendIntegrationAccordion">
                            <div class="accordion-body">
                                <p>For Django or Flask applications:</p>
                                <ol class="list-spaced mb-4">
                                    <li>Convert <code>base.ejs</code> to a Django/Jinja2 base template</li>
                                    <li>Use template inheritance with blocks</li>
                                    <li>Pass context variables from views to templates</li>
                                </ol>
                                <h4>Django Example:</h4>
                                <div class="code-example">
                                    <pre><code>// Django template example (simplified)
// templates/base.html
&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>
    &lt;title>{% block title %}SmartAdmin{% endblock %}&lt;/title>
    &lt;!-- CSS includes -->
&lt;/head>
&lt;body>
    {% include 'partials/navigation.html' %}
    
    &lt;div class="main-content">
        {% block content %}{% endblock %}
    &lt;/div>
    
    &lt;!-- Script includes -->
&lt;/body>
&lt;/html>

// templates/index.html
{% extends 'base.html' %}

{% block title %}{{ page_title }}{% endblock %}

{% block content %}
    <!-- Your page content here -->
{% endblock %}</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingJS">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseJS" aria-expanded="false" aria-controls="collapseJS">
                                JavaScript Frameworks (React/Vue/Angular)
                            </button>
                        </h2>
                        <div id="collapseJS" class="accordion-collapse collapse" aria-labelledby="headingJS" data-bs-parent="#backendIntegrationAccordion">
                            <div class="accordion-body">
                                <p>For modern JavaScript frameworks:</p>
                                <ol class="list-spaced mb-4">
                                    <li>Extract the CSS and JS dependencies</li>
                                    <li>Create component-based layouts</li>
                                    <li>Use props/state to manage dynamic content</li>
                                </ol>
                                <h4>React Example:</h4>
                                <div class="code-example">
                                    <pre><code>// React components example (simplified)

// Layout.jsx
import React from 'react';
import Navigation from './components/Navigation';

const Layout = ({ pageTitle, children, additionalCSS = [], additionalJS = [] }) => {
  // Component implementation
  return (
    &lt;>
      &lt;Navigation />
      &lt;div className="main-content">
        {children}
      &lt;/div>
    &lt;/>
  );
};

// HomePage.jsx
import React from 'react';
import Layout from './Layout';

const HomePage = () => {
  return (
    &lt;Layout pageTitle="Home Page">
      &lt;h1>Welcome to SmartAdmin&lt;/h1>
      &lt;div className="main-content">
        &lt;p>Your content here&lt;/p>
      &lt;/div>
    &lt;/Layout>
  );
};</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <section id="best-practices" class="concept-section">
                <h2 class="concept-title">Best Practices for Customization</h2>
                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Practice</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><strong>Modular Structure</strong></td>
                                <td>Break down the UI into reusable components/partials that can be maintained independently</td>
                            </tr>
                            <tr>
                                <td><strong>Configuration-Driven</strong></td>
                                <td>Use configuration objects to control page behavior rather than hardcoding values</td>
                            </tr>
                            <tr>
                                <td><strong>Asset Management</strong></td>
                                <td>Implement proper bundling and minification for production environments</td>
                            </tr>
                            <tr>
                                <td><strong>Authentication Integration</strong></td>
                                <td>Plan for user authentication UI components and session management</td>
                            </tr>
                            <tr>
                                <td><strong>API Communication</strong></td>
                                <td>Establish patterns for frontend-backend communication (REST, GraphQL, etc.)</td>
                            </tr>
                            <tr>
                                <td><strong>State Management</strong></td>
                                <td>Implement appropriate state management for your application complexity</td>
                            </tr>
                            <tr>
                                <td><strong>Error Handling</strong></td>
                                <td>Create consistent error handling and user feedback mechanisms</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="pro-tip">
                    <strong>Pro Tip:</strong> Create a standardized page template early in your development process. This template should include all common elements (navigation, footer, authentication UI) and provide clear extension points for page-specific content.
                </div>
            </section>

            <section id="theme-colors" class="concept-section">
                <h2 class="concept-title">Theme Colors and Customization</h2>
                <p>SmartAdmin v5 provides a powerful theming system that allows you to customize the visual appearance of your application. The theme is built using SCSS variables, making it easy to change colors, typography, and other visual elements.</p>
                
                <h4>Understanding _variables.scss</h4>
                <p>The core of the theming system is the <code>src/sass/app/_variables.scss</code> file. This file contains all the color definitions and other visual variables that control the appearance of the template:</p>
                
                <div class="code-example">
                    <pre><code>// Core theme colors in _variables.scss
$color-primary:                     #2196F3;
$color-success:                     #1dc9b7;
$color-info:                        #a486d1;
$color-warning:                     #ffc241;
$color-danger:                      #fd3995;
$color-fusion:                      darken(desaturate(adjust-hue($color-primary, 5), 80%), 25%);
$color-white:                       #fff;
$color-black:                       #000; 

// Color Maps
$theme-colors: (
  'primary': $color-primary,
  'success': $color-success,
  'info': $color-info,
  'warning': $color-warning,
  'danger': $color-danger,
  'fusion': $color-fusion,
  'dark': $color-black,
  'light': $color-white,
  'secondary': #6c757d
);</code></pre>
                </div>

                <h4>Customizing Theme Colors</h4>
                <p>To change the theme colors of your application:</p>
                
                <ol>
                    <li>Locate and open <code>src/sass/app/_variables.scss</code></li>
                    <li>Modify the color variables to match your brand or design requirements</li>
                    <li>Run <code>gulp appCss</code> to compile the SCSS into CSS</li>
                    <li>Or use <code>gulp</code> to start the watch process for automatic compilation on changes</li>
                </ol>

                <div class="table-responsive mb-4 mt-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Color Variable</th>
                                <th>Used For</th>
                                <th>Default Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><code>$color-primary</code></td>
                                <td>Primary buttons, links, active states, and brand elements</td>
                                <td>#2196F3 (Blue)</td>
                            </tr>
                            <tr>
                                <td><code>$color-success</code></td>
                                <td>Success messages, confirmations, and positive actions</td>
                                <td>#1dc9b7 (Teal)</td>
                            </tr>
                            <tr>
                                <td><code>$color-info</code></td>
                                <td>Information messages, help text, and neutral notifications</td>
                                <td>#a486d1 (Purple)</td>
                            </tr>
                            <tr>
                                <td><code>$color-warning</code></td>
                                <td>Warning messages, caution indicators, and attention-grabbing elements</td>
                                <td>#ffc241 (Amber)</td>
                            </tr>
                            <tr>
                                <td><code>$color-danger</code></td>
                                <td>Error messages, destructive actions, and critical alerts</td>
                                <td>#fd3995 (Pink)</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <h4>CSS Variables System</h4>
                <p>SmartAdmin v5 converts SCSS variables into CSS custom properties (variables) for runtime theme switching capabilities. This enables features like dark mode and dynamic theming:</p>
                
                <div class="code-example">
                    <pre><code>// CSS Variables in :root
:root {
    // Theme Colors
    @each $name, $value in $theme-colors {
        // Base color
        --bs-#{$name}: #{$value};
        
        // RGB values for rgba() usage
        --bs-#{$name}-rgb: #{red($value)}, #{green($value)}, #{blue($value)};
        
        // Text emphasis colors
        --bs-#{$name}-text-emphasis: #{darken($value, 30%)};
        
        // Subtle background colors
        --bs-#{$name}-bg-subtle: #{lighten($value, 30%)};
        
        // Subtle border colors
        --bs-#{$name}-border-subtle: #{lighten($value, 20%)};
    }
}</code></pre>
                </div>
            
                <h4>Compiling Theme Changes</h4>
                <p>After making changes to the SCSS variables, you need to compile them to CSS using Gulp:</p>
                
                <div class="code-example">
                    <pre><code>// Compile SCSS to CSS (one-time)
gulp appCss

// Watch for changes and automatically recompile (development)
gulp

// Build optimized CSS for production
gulp build</code></pre>
                </div>

                <div>
                    <h4>Dark Mode Customization</h4>
                    <p>The dark mode theme is defined in the same file using the <code>[data-bs-theme=dark]</code> selector found in <code>src/sass/app/_darkmode.scss</code></p>
                    
                    <h6>Inverse Key Variables</h6>
                    <p>The following variables are used to customize the dark mode theme which has the proper inverse effect:</p>
                    <ul>
                        <li><code>--bs-body-color</code> / <code>--bs-body-color-rgb</code>: Inverse Text color</li>
                        <li><code>--bs-body-bg</code> / <code>--bs-body-bg-rgb</code>: Inverse Background color</li>
                        <li><code>--bs-emphasis-color</code> / <code>--bs-emphasis-color-rgb</code>: Inverse Emphasis color</li>
                        <li><code>--bs-border-color</code> / <code>--bs-border-color-rgb</code>: Inverse Border color</li>
                    </ul>

                    <div class="code-example">
                    <pre><code>// Dark theme overrides 
[data-bs-theme=dark] {
    color-scheme: dark;
    --bs-body-color: #{$body-color-dark};
    --bs-body-color-rgb: #{red($body-color-dark)}, #{green($body-color-dark)}, #{blue($body-color-dark)};
    --bs-body-bg: #{$body-bg-dark};
    --bs-body-bg-rgb: #{red($body-bg-dark)}, #{green($body-bg-dark)}, #{blue($body-bg-dark)};
    --bs-emphasis-color: #{$body-emphasis-color-dark};
    --bs-emphasis-color-rgb: #{red($body-emphasis-color-dark)}, #{green($body-emphasis-color-dark)}, #{blue($body-emphasis-color-dark)};
    --bs-secondary-color: #{$body-secondary-color-dark};
    --bs-secondary-color-rgb: #{red($body-secondary-color-dark)}, #{green($body-secondary-color-dark)}, #{blue($body-secondary-color-dark)};
    --bs-secondary-bg: #{$body-secondary-bg-dark};
    --bs-secondary-bg-rgb: #{red($body-secondary-bg-dark)}, #{green($body-secondary-bg-dark)}, #{blue($body-secondary-bg-dark)};
    --bs-tertiary-color: #{$body-tertiary-color-dark};
    --bs-tertiary-color-rgb: #{red($body-tertiary-color-dark)}, #{green($body-tertiary-color-dark)}, #{blue($body-tertiary-color-dark)};
    --bs-tertiary-bg: #{$body-tertiary-bg-dark};
    --bs-tertiary-bg-rgb: #{red($body-tertiary-bg-dark)}, #{green($body-tertiary-bg-dark)}, #{blue($body-tertiary-bg-dark)};
    --bs-primary-text-emphasis: #{$primary-text-emphasis-dark};
    --bs-secondary-text-emphasis: #{$secondary-text-emphasis-dark};
    --bs-success-text-emphasis: #{$success-text-emphasis-dark};
    --bs-info-text-emphasis: #{$info-text-emphasis-dark};
    --bs-warning-text-emphasis: #{$warning-text-emphasis-dark};
    --bs-danger-text-emphasis: #{$danger-text-emphasis-dark};
    --bs-light-text-emphasis: #{$light-text-emphasis-dark};
    --bs-dark-text-emphasis: #{$dark-text-emphasis-dark};
    --bs-primary-bg-subtle: #{$primary-bg-subtle-dark};
    --bs-secondary-bg-subtle: #{$secondary-bg-subtle-dark};
    --bs-success-bg-subtle: #{$success-bg-subtle-dark};
    --bs-info-bg-subtle: #{$info-bg-subtle-dark};
    --bs-warning-bg-subtle: #{$warning-bg-subtle-dark};
    --bs-danger-bg-subtle: #{$danger-bg-subtle-dark};
    --bs-light-bg-subtle: #{$light-bg-subtle-dark};
    --bs-dark-bg-subtle: #{$dark-bg-subtle-dark};
    --bs-primary-border-subtle: #{$primary-border-subtle-dark};
    --bs-secondary-border-subtle: #{$secondary-border-subtle-dark};
    --bs-success-border-subtle: #{$success-border-subtle-dark};
    --bs-info-border-subtle: #{$info-border-subtle-dark};
    --bs-warning-border-subtle: #{$warning-border-subtle-dark};
    --bs-danger-border-subtle: #{$danger-border-subtle-dark};
    --bs-light-border-subtle: #{$light-border-subtle-dark};
    --bs-dark-border-subtle: #{$dark-border-subtle-dark};
    --bs-border-color: #{$border-color-dark};
    --bs-border-color-translucent: #{$border-color-translucent-dark};
    --bs-headings-color: #{$headings-color-dark};
    --bs-link-color: #{$link-color-dark};
    --bs-link-hover-color: #{$link-hover-color-dark};
    --bs-code-color: #{$code-color-dark};
    --bs-mark-color: #{$mark-color-dark};
    --bs-mark-bg: #{$mark-bg-dark};
    --bs-form-select-indicator-color: #{$form-select-indicator-color-dark};
    --bs-form-select-indicator: #{$form-select-indicator-dark};
    --bs-form-switch-color: #{$form-switch-color-dark};
    --bs-form-switch-bg-image: #{$form-switch-bg-image-dark};
    --bs-form-valid-color: #{$form-valid-color-dark};
    --bs-form-valid-border-color: #{$form-valid-border-color-dark};
    --bs-form-invalid-color: #{$form-invalid-color-dark};
    --bs-form-invalid-border-color: #{$form-invalid-border-color-dark};
    --bs-accordion-icon-color: #{$accordion-icon-color-dark};
    --bs-accordion-icon-active-color: #{$accordion-icon-active-color-dark};
    --bs-accordion-button-icon: #{$accordion-button-icon-dark};
    --bs-accordion-button-active-icon: #{$accordion-button-active-icon-dark};
}</code></pre>
                    </div>
                </div>

                <div class="warning">
                    <strong>Important:</strong> Always use the Gulp tasks to compile your SCSS changes. Direct edits to CSS files will be overwritten during the next compilation.
                </div>

                <h4>Advanced Customization Tips</h4>
                <ul class="list-spaced mb-4">
                    <li><strong>Color Shades:</strong> SmartAdmin generates color shades (50-900) for each theme color automatically</li>
                    <li><strong>Typography:</strong> Customize fonts by changing the <code>--font-family</code> variable</li>
                    <li><strong>Layout:</strong> Adjust layout dimensions with variables like <code>--app-header-height</code> and <code>--menu-width</code></li>
                    <li><strong>Custom Themes:</strong> Create multiple theme files by extending the base variables</li>
                </ul>

                <div class="pro-tip">
                    <strong>Pro Tip:</strong> For large projects, create a separate <code>_custom-variables.scss</code> file that imports and overrides the default variables. This approach makes it easier to update the template while preserving your customizations.
                </div>
            </section>

            <section id="smartapp-examples" class="concept-section">
                <h2 class="concept-title">Examples and Usage</h2>
                <h4>Toggle Actions</h4>
                <p>Toggle actions are used to switch classes on and off elements:</p>
                <div class="code-example">
                    <pre><code>&lt;!-- Basic Toggle Example -->
&lt;button data-action="toggle" data-class="my-class">Toggle Class&lt;/button>

&lt;!-- Toggle with Dependencies -->
&lt;button data-action="toggle" 
        data-class="primary-theme"
        data-dependency="dark-mode light-mode">Toggle Theme&lt;/button>

&lt;!-- Toggle with Co-dependencies -->
&lt;button data-action="toggle" 
        data-class="menu-expanded"
        data-codependence="menu-collapsed">Toggle Menu&lt;/button></code></pre>
                </div>

                <h4>Panel Actions</h4>
                <p>SmartApp.js includes comprehensive panel management features:</p>
                <div class="code-example">
                    <pre><code>&lt;!-- Panel Controls -->
&lt;div class="panel">
    &lt;div class="panel-hdr">
        &lt;h2>Example Panel&lt;/h2>
        &lt;div class="panel-toolbar">
            &lt;button class="btn btn-panel" data-action="panel-collapse">
                &lt;i class="fa fa-minus">&lt;/i>
            &lt;/button>
            &lt;button class="btn btn-panel" data-action="panel-fullscreen">
                &lt;i class="fa fa-expand">&lt;/i>
            &lt;/button>
            &lt;button class="btn btn-panel" data-action="panel-close">
                &lt;i class="fa fa-times">&lt;/i>
            &lt;/button>
        &lt;/div>
    &lt;/div>
    &lt;div class="panel-container">
        &lt;div class="panel-content">
            Panel content here
        &lt;/div>
    &lt;/div>
&lt;/div></code></pre>
                </div>

                <h4>Sound Controls</h4>
                <p>SmartApp.js provides audio playback functionality:</p>
                <div class="code-example">
                    <pre><code>&lt;!-- Play Sound Example -->
&lt;button data-action="playsound" 
        data-soundfile="notification.mp3">
    Play Notification
&lt;/button>

&lt;!-- Play Sound with Path -->
&lt;button data-action="playsound" 
        data-soundpath="media/sound/" 
        data-soundfile="alert.mp3">
    Play Alert
&lt;/button></code></pre>
                </div>

                <h4>Class Management</h4>
                <p>Direct class manipulation on target elements:</p>
                <div class="code-example">
                    <pre><code>&lt;!-- Add Class Example -->
&lt;button data-action="add-class" 
        data-target="#myElement" 
        data-classname="active">
    Activate Element
&lt;/button>

&lt;!-- Remove Class Example -->
&lt;button data-action="remove-class" 
        data-target="#myElement" 
        data-classname="disabled">
    Enable Element
&lt;/button>

&lt;!-- Toggle Replace Example -->
&lt;button data-action="toggle-replace" 
        data-target="#myElement"
        data-removeclass="light-theme"
        data-addclass="dark-theme">
    Switch Theme
&lt;/button></code></pre>
                </div>

                <h4>Working Examples</h4>
                <div class="mb-4">
                    <p>Here are some live examples you can try:</p>
                    
                    <div class="panel mb-4">
                        <div class="panel-hdr">
                            <h2>Demo Panel</h2>
                            <div class="panel-toolbar">
                                <button type="button" class="btn btn-panel" data-action="panel-collapse">
                                    <i class="fa fa-minus"></i>
                                </button>
                                <button type="button" class="btn btn-panel" data-action="panel-fullscreen">
                                    <i class="fa fa-expand"></i>
                                </button>
                                <button type="button" class="btn btn-panel" data-action="panel-close">
                                    <i class="fa fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="panel-container">
                            <div class="panel-content">
                                <p>This is a working example of a panel with all controls enabled. <strong>Tip:</strong>Remember to use the <code>btn-has-sound</code> class when adding a sound to a button.</p>
                                <button type="button" class="btn btn-outline-default btn-has-sound d-flex align-items-center" data-action="playsound" data-soundfile="notification.mp3">
                                    <svg class="sa-icon d-inline-block me-2">
                                        <use href="img/sprite.svg#volume-2"></use>
                                    </svg>
                                    Play Sound
                                </button>
                            </div>
                        </div>
                    </div>

                    
                    <p>Adds the class "demo-active" to the HTML element and saves the settings</p>
                    <button type="button" class="btn btn-outline-default mb-3" data-action="toggle" data-class="demo-active">
                        Toggle Class
                    </button>

                    <p>Adds/Remove the class "highlight" to the #demoElement element</p>
                    <div class="d-flex gap-2 mb-4">    
                        <button type="button" class="btn btn-outline-default" data-action="add-class" data-target="#demoElement" data-classname="highlight">
                            Add Highlight
                        </button>
                        <button type="button" class="btn btn-outline-default" data-action="remove-class" data-target="#demoElement" data-classname="highlight">
                            Remove Highlight
                        </button>
                    </div>
                </div>
            </section>

            <section id="theme-settings" class="concept-section">
                <h2 class="concept-title">Theme Settings and Customization</h2>
                <p>SmartAdmin provides a comprehensive theme settings system that allows you to customize the layout and appearance of your application. These settings can be controlled through data attributes and are automatically saved to local storage.</p>

                <h4>Available Theme Settings</h4>
                <div class="table-responsive mb-4">
                    <table class="table table-striped table-clean">
                        <thead>
                            <tr>
                                <th>Setting</th>
                                <th>Class</th>
                                <th>Description</th>
                                <th>Example</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Header Fixed</td>
                                <td><code>set-header-fixed</code></td>
                                <td>Fixes the header position at the top of the page</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-header-fixed">
                                        <label class="form-check-label">Toggle Fixed Header</label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Navigation Full Height</td>
                                <td><code>set-nav-full</code></td>
                                <td>Extends navigation to full page height</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-nav-full" data-codependence="set-nav-collapsed">
                                        <label class="form-check-label">Toggle Full Height</label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Navigation Fixed</td>
                                <td><code>set-nav-fixed</code></td>
                                <td>Fixes the navigation position</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-nav-fixed">
                                        <label class="form-check-label">Toggle Fixed Nav</label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Navigation Collapsed</td>
                                <td><code>set-nav-collapsed</code></td>
                                <td>Collapses the navigation to icons only</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-nav-collapsed" data-dependency="set-nav-full">
                                        <label class="form-check-label">Toggle Collapsed Nav</label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Navigation Minified</td>
                                <td><code>set-nav-minified</code></td>
                                <td>Minifies the navigation menu</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-nav-minified">
                                        <label class="form-check-label">Toggle Minified Nav</label>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td>Dark Navigation</td>
                                <td><code>set-nav-dark</code></td>
                                <td>Applies dark theme to navigation</td>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" data-action="toggle" data-class="set-nav-dark">
                                        <label class="form-check-label">Toggle Dark Nav</label>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <h4>Implementation Example</h4>
                <p>Here's how to implement theme settings in your application:</p>
                <div class="code-example">
                    <pre><code>&lt;!-- Theme Setting Toggle -->
&lt;div class="form-check">
    &lt;input class="form-check-input" 
           type="checkbox" 
           id="actionNavFull" 
           data-action="toggle" 
           data-class="set-nav-full"
           data-codependence="set-nav-collapsed">
    &lt;label class="form-check-label" for="actionNavFull">
        Navigation full height
    &lt;/label>
&lt;/div>

&lt;!-- Theme Setting with Dependencies -->
&lt;div class="form-check">
    &lt;input class="form-check-input" 
           type="checkbox" 
           id="actionNavCollapsed" 
           data-action="toggle" 
           data-class="set-nav-collapsed"
           data-dependency="set-nav-full">
    &lt;label class="form-check-label" for="actionNavCollapsed">
        Navigation collapsed
    &lt;/label>
&lt;/div></code></pre>
                </div>

                <h4>Understanding Dependencies</h4>
                <p>Theme settings can have dependencies and co-dependencies:</p>
                <ul class="list-spaced mb-4">
                    <li><strong>data-dependency:</strong> Classes that must be added when this setting is enabled</li>
                    <li><strong>data-codependence:</strong> Classes that must be removed when this setting is enabled</li>
                </ul>

                <div class="pro-tip">
                    <strong>Pro Tip:</strong> Theme settings are automatically saved to local storage and restored on page reload. You can reset all settings using the <code>appDOM.resetStyle()</code> method.
                </div>
            </section>

        </div>
        <div class="order-1 order-xl-2 col-lg-12 col-xl-3 position-relative">
            <!-- Sidebar (Right Side) - Sticky Navigation -->
            <h5 class="mb-3 ps-lg-3">On This Page</h5>
            <ul class="list-unstyled ps-lg-3">
                <li class="py-1"><a href="#introduction">Introduction</a></li>
                <li class="py-1"><a href="#prerequisites">Prerequisites</a></li>
                <li class="py-1"><a href="#installation">Installation</a></li>
                <li class="py-1"><a href="#project-structure">Project Structure</a></li>
                <li class="py-1"><a href="#gulp-system">Gulp Build System</a></li>
                <li class="py-1"><a href="#navigation-system">Navigation System</a></li>
                <li class="py-1"><a href="#customizing-index">Customizing index.ejs</a></li>
                <li class="py-1"><a href="#backend-integration">Integration with Backend Frameworks</a></li>
                <li class="py-1"><a href="#best-practices">Best Practices for Customization</a></li>
                <li class="py-1"><a href="#theme-colors">Theme Colors and Customization</a></li>
                <li class="py-1"><a href="#smartapp-examples">Examples and Usage</a></li>
                <li class="py-1"><a href="#theme-settings">Theme Settings and Customization</a></li>
            </ul>
        
        </div>
    </div>
    </div>

    `
}) %>