let db;const DB_NAME="IconStackDB",STORE_NAME="savedIcons",DB_VERSION=1;let currentToast=null;function initDB(){return new Promise((e,t)=>{const o=indexedDB.open(DB_NAME,DB_VERSION);o.onerror=()=>t(o.error),o.onsuccess=()=>{db=o.result,e(db)},o.onupgradeneeded=e=>{var e=e.target.result;e.objectStoreNames.contains(STORE_NAME)||((e=e.createObjectStore(STORE_NAME,{keyPath:"id",autoIncrement:!0})).createIndex("name","name",{unique:!0}),e.createIndex("createdAt","createdAt",{unique:!1}))}})}async function getAllSavedIcons(){const o=db.transaction([STORE_NAME],"readonly").objectStore(STORE_NAME).getAll();return new Promise((e,t)=>{o.onsuccess=()=>e(o.result),o.onerror=()=>t(o.error)})}function showToast(e,t="primary"){currentToast&&currentToast.hide();let o=document.querySelector(".toast-container");o||((o=document.createElement("div")).className="toast-container position-fixed top-0 end-0 p-3",document.body.appendChild(o));var n="toast-"+Date.now();const s=document.createElement("div");s.className=`toast hide align-items-center border-0 py-2 px-3 bg-${t} text-white`,s.id=n,s.setAttribute("role","alert"),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true"),s.style.setProperty("--bs-toast-max-width","auto"),s.innerHTML=`
        <div class="d-flex">
            <div class="toast-body d-flex align-items-center justify-content-center">
                ${e}
            </div>
            <button type="button" class="btn btn-system ms-auto" data-bs-dismiss="toast" aria-label="Close">
                <svg class="sa-icon sa-icon-light">
                    <use href="img/sprite.svg#x"></use>
                </svg>
            </button>
        </div>
    `,o.appendChild(s),currentToast=new bootstrap.Toast(s,{autohide:!0,delay:3e3}),s.addEventListener("hidden.bs.toast",function(){currentToast=null,s.remove()}),currentToast.show()}async function deleteIcon(n){try{if(confirm("Are you sure you want to delete this icon?")){const s=db.transaction([STORE_NAME],"readwrite").objectStore(STORE_NAME);await new Promise((e,t)=>{const o=s.delete(n);o.onsuccess=()=>e(),o.onerror=()=>t(o.error)}),showToast("Icon deleted successfully","success"),await populateIconList()}}catch(e){console.error("Error deleting icon:",e),showToast("Failed to delete icon","danger")}}function copyIconToClipboard(e){navigator.clipboard.writeText(e).then(()=>showToast("Icon copied to clipboard!","success")).catch(()=>showToast("Failed to copy icon","danger"))}async function populateIconList(){try{var e=await getAllSavedIcons();const a=document.getElementById("iconList");a.innerHTML="",e.sort((e,t)=>new Date(t.createdAt)-new Date(e.createdAt)),e.forEach(t=>{var e=document.createElement("li"),o=(e.className="col-4 col-sm-3 col-md-3 col-lg-2 col-xl-2 col-xxl-2 col-xxxl-1 mb-g",e.innerHTML=`
                <div class="d-flex flex-column align-items-center p-2 m-0 w-100 shadow-hover-2 border rounded position-relative show-child-on-hover overflow-hidden" style="font-size: 4rem;">
                    <div class="show-on-hover-parent bg-secondary bg-opacity-50 position-absolute top-0 start-0 w-100 h-100 z-1">
                        <div class="d-flex flex-row align-items-end justify-content-center h-100 gap-1 pb-2">
                            <button type="button" class="btn btn-xs btn-success copy-btn">
                                COPY
                            </button>
                            <button type="button" class="btn btn-xs btn-danger delete-btn">
                                DEL
                            </button>
                        </div>
                    </div>
                    <div class="pb-1 d-flex icon-container">
                        <div class="stack-icon">
                            ${t.html}
                        </div>
                    </div>
                    <div class="text-muted fs-nano icon-name">
                        ${t.name}
                    </div>
                </div>
            `,a.appendChild(e),e.querySelector(".copy-btn")),n=e.querySelector(".delete-btn"),e=e.querySelector(".icon-container");const s=`<div class="stack-icon">${t.html}</div>`;o.addEventListener("click",e=>{e.stopPropagation(),copyIconToClipboard(s)}),n.addEventListener("click",e=>{e.stopPropagation(),deleteIcon(t.id)}),e.addEventListener("click",()=>{copyIconToClipboard(s)})}),0===e.length&&(a.innerHTML=`
                <div class="col-12 text-center text-muted py-5">
                    <h4>No saved icons found</h4>
                    <p>Create and save some icons using the <a href="stackgenerator.html">Stack Generator</a> to see them here.</p>
                </div>
            `)}catch(e){console.error("Error loading icons:",e),showToast("Failed to load icons","danger")}}function filterIcons(){const o=document.getElementById("searchIcons").value.toLowerCase();document.querySelectorAll("#iconList li").forEach(e=>{var t=e.querySelector(".icon-name").textContent.toLowerCase().includes(o);e.style.display=t?"":"none"})}document.addEventListener("DOMContentLoaded",async function(){try{await initDB(),await populateIconList(),document.getElementById("searchIcons").addEventListener("input",filterIcons),console.log("Stack Library initialized successfully")}catch(e){console.error("Error initializing Stack Library:",e),showToast("Failed to initialize Stack Library","danger")}});